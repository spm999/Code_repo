const mongoose = require("mongoose");

const codeFileSchema = new mongoose.Schema(
  {
    title: {
      type: String,
      required: true,
      trim: true,
    },
    description: {
      type: String,
      default: "",
    },
    language: {
      type: String,
      required: true,
    },
    tags: [{
      type: String,
    }],
    // Owner/creator
    createdBy: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      required: true,
    },
    // Current active version
    currentVersion: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "CodeVersion",
      default: null,
    },
    // Multi-level approval workflow
    approvalStatus: {
      type: String,
      enum: ["draft", "pending_reviewer", "pending_admin", "approved", "rejected", "needs_revision"],
      default: "draft",
    },
    // Assigned reviewer (from reviewer role users)
    assignedReviewer: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      default: null,
    },
    // Assigned admin (for final approval)
    assignedAdmin: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      default: null,
    },
    // Sharing options
    sharing: {
      isShared: {
        type: Boolean,
        default: false,
      },
      sharedWith: [{
        user: {
          type: mongoose.Schema.Types.ObjectId,
          ref: "User",
        },
        permission: {
          type: String,
          enum: ["view", "download", "comment"],
          default: "view",
        },
        sharedAt: {
          type: Date,
          default: Date.now,
        },
        sharedBy: {
          type: mongoose.Schema.Types.ObjectId,
          ref: "User",
        },
      }],
      publicLink: {
        type: String,
        default: null,
      },
      publicLinkExpires: {
        type: Date,
        default: null,
      },
    },
    // Collaborators who can suggest edits
    collaborators: [{
      user: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "User",
      },
      permission: {
        type: String,
        enum: ["view", "suggest_edits"],
        default: "view",
      },
    }],
    // Is this file publicly visible?
    isPublic: {
      type: Boolean,
      default: false,
    },
    // Notification preferences
    notifications: {
      onReview: {
        type: Boolean,
        default: true,
      },
      onApproval: {
        type: Boolean,
        default: true,
      },
      onComment: {
        type: Boolean,
        default: true,
      },
    },
    // Audit info
    lastUpdatedBy: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      default: null,
    },
    lastUpdatedAt: {
      type: Date,
      default: Date.now,
    },
  },
  { timestamps: true }
);

module.exports = mongoose.model("CodeFile", codeFileSchema);